{"searchDocs":[{"title":"UID","type":0,"sectionRef":"#","url":"/UID/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Features​","type":1,"pageTitle":"UID","url":"/UID/docs/intro#features","content":" Generate cryptographically strong GUIDsGenerate UIDs in various encodings and lengthsValidate UID strings against supported formatsClone UID generator instances  ","version":"Next","tagName":"h2"},{"title":"Quick Links​","type":1,"pageTitle":"UID","url":"/UID/docs/intro#quick-links","content":" Getting StartedAPI Reference    For full documentation and examples, see the Getting Started guide. ","version":"Next","tagName":"h2"},{"title":"UID","type":0,"sectionRef":"#","url":"/UID/api/UID","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"UID","url":"/UID/api/UID#types","content":" ","version":null,"tagName":"h2"},{"title":"UIDBase​","type":1,"pageTitle":"UID","url":"/UID/api/UID#UIDBase","content":"&lt;/&gt; type UIDBase = &quot;Base256ASCII&quot; | &quot;Base94JSONSAFE&quot; | &quot;Base64URL&quot; | &quot;Hex&quot; | &quot;GUID&quot; Supported UID base formats ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"UID","url":"/UID/api/UID#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"UID","url":"/UID/api/UID#new","content":"&lt;/&gt; UID.new( seed: number?-- Optional seed for the randomizer. Must be in range [-9007199254740991, 9007199254740991]. ) → UID-- A new UID generator instance. Creates a new UID generator instance  ","version":null,"tagName":"h3"},{"title":"isbase​","type":1,"pageTitle":"UID","url":"/UID/api/UID#isbase","content":"&lt;/&gt; UID.isbase( uid: string,-- The UID to validate. uidBase: UIDBase-- The base format to validate against. ) → boolean-- Whether the UID matches the specified base format. Validates a UID against a specified base format  ","version":null,"tagName":"h3"},{"title":"guid​","type":1,"pageTitle":"UID","url":"/UID/api/UID#guid","content":"&lt;/&gt; UID.guid() → string-- A GUID string. Uniqueness is 2^128 possibilities (128-bit). Generates a new GUID string  ","version":null,"tagName":"h3"},{"title":"NextBase256ASCII​","type":1,"pageTitle":"UID","url":"/UID/api/UID#NextBase256ASCII","content":"&lt;/&gt; UID:NextBase256ASCII( length: number-- The length of the UID. Uniqueness is (256 ^ length) possibilities. ) → string-- A random Base256ASCII string. Generates a new Base256ASCII string TIP We recommend using this UIDs for internal script usage and instance attributes. DANGER You may facing UIDs information loss for specific use cases. like datastore, middlewares remote transmission, and more.  ","version":null,"tagName":"h3"},{"title":"NextBase94JSONSAFE​","type":1,"pageTitle":"UID","url":"/UID/api/UID#NextBase94JSONSAFE","content":"&lt;/&gt; UID:NextBase94JSONSAFE( length: number-- The length of the UID. Uniqueness is (94 ^ length) possibilities. ) → string-- A random Base94JSONSAFE string. Generates a new Base94JSONSAFE string TIP We recommend this UIDs for datastore related. as if zero-overhead and compact.  ","version":null,"tagName":"h3"},{"title":"NextBase64URL​","type":1,"pageTitle":"UID","url":"/UID/api/UID#NextBase64URL","content":"&lt;/&gt; UID:NextBase64URL( length: number-- The length of the UID. Uniqueness is (64 ^ length) possibilities. ) → string-- A random Base64URL string. Generates a new Base64URL string TIP We recommend using this UIDs for human-friendly writing. like coupon/redeem codes, short urls, and more.  ","version":null,"tagName":"h3"},{"title":"NextHex​","type":1,"pageTitle":"UID","url":"/UID/api/UID#NextHex","content":"&lt;/&gt; UID:NextHex( length: number-- The length of the UID. Uniqueness is (16 ^ length) possibilities. ) → string-- A random Hex string. Generates a new Hex string NOTE We recommend using this UIDs for general usage. but you may consider using other UIDs for specific use cases. and better compactness.  ","version":null,"tagName":"h3"},{"title":"Clone​","type":1,"pageTitle":"UID","url":"/UID/api/UID#Clone","content":"&lt;/&gt; UID:Clone() → UID-- A new UID object with the same state as the original. Clones the UID object ","version":null,"tagName":"h3"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/UID/docs/GettingStarted","content":"","keywords":"","version":"Next"},{"title":"Installation​","type":1,"pageTitle":"Getting Started","url":"/UID/docs/GettingStarted#installation","content":" Via Wally (recommended): Add UID to your wally.toml dependencies: [dependencies] UID = &quot;&lt;your-namespace&gt;/UID@&lt;version&gt;&quot; Run wally install to fetch the package. Manual Installation: Download the src/init.luau file and place it in your project (e.g., under ReplicatedStorage/Modules/UID.luau).  ","version":"Next","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Getting Started","url":"/UID/docs/GettingStarted#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Importing UID​","type":1,"pageTitle":"Getting Started","url":"/UID/docs/GettingStarted#importing-uid","content":" local UID = require(path.to.UID)   ","version":"Next","tagName":"h3"},{"title":"Creating a UID Generator Instance​","type":1,"pageTitle":"Getting Started","url":"/UID/docs/GettingStarted#creating-a-uid-generator-instance","content":" You can create a new UID generator with an optional seed:  local uidGen = UID.new() -- or UID.new(12345)   ","version":"Next","tagName":"h3"},{"title":"Generating UIDs​","type":1,"pageTitle":"Getting Started","url":"/UID/docs/GettingStarted#generating-uids","content":" UID supports several formats:  GUID (128-bit, standard format)Hex (custom length)Base64URL (custom length)Base94JSONSAFE (custom length)Base256ASCII (custom length)  Generate a GUID​  local guid = UID.guid() print(guid) -- e.g., &quot;b3e1c2d4-5f6a-7b8c-9d0e-1f2a3b4c5d6e&quot;   Generate a Hex UID​  local hex = uidGen:NextHex(16) -- 16 hex characters print(hex)   Generate a Base64URL UID​  local base64url = uidGen:NextBase64URL(16) print(base64url)   Generate a Base94JSONSAFE UID​  local base94 = uidGen:NextBase94JSONSAFE(16) print(base94)   Generate a Base256ASCII UID​  local base256 = uidGen:NextBase256ASCII(16) print(base256)   ","version":"Next","tagName":"h3"},{"title":"Validating UIDs​","type":1,"pageTitle":"Getting Started","url":"/UID/docs/GettingStarted#validating-uids","content":" You can check if a UID string matches a specific format:  local isHex = UID.isbase(hex, &quot;Hex&quot;) local isGuid = UID.isbase(guid, &quot;GUID&quot;)   ","version":"Next","tagName":"h3"},{"title":"Cloning a UID Generator​","type":1,"pageTitle":"Getting Started","url":"/UID/docs/GettingStarted#cloning-a-uid-generator","content":" local clone = uidGen:Clone()   ","version":"Next","tagName":"h3"},{"title":"API Reference​","type":1,"pageTitle":"Getting Started","url":"/UID/docs/GettingStarted#api-reference","content":" See the API documentation for detailed descriptions of all methods and types.    For more information, see the intro or the Moonwave documentation. ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}